# coding: utf-8

"""
    Insight Sentinel API

    API to control beamforming on a Insight Sentinel device  # noqa: E501

    OpenAPI spec version: 0.0.0
    Contact: jonathan@insightacoustics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BeamformerState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'theta': 'float',
        'phi': 'float',
        'gain': 'int',
        'delays': 'list[int]',
        'enabled': 'list[bool]',
        'neg': 'list[bool]'
    }

    attribute_map = {
        'id': 'id',
        'theta': 'theta',
        'phi': 'phi',
        'gain': 'gain',
        'delays': 'delays',
        'enabled': 'enabled',
        'neg': 'neg'
    }

    def __init__(self, id=None, theta=None, phi=None, gain=None, delays=None, enabled=None, neg=None):  # noqa: E501
        """BeamformerState - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._theta = None
        self._phi = None
        self._gain = None
        self._delays = None
        self._enabled = None
        self._neg = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if theta is not None:
            self.theta = theta
        if phi is not None:
            self.phi = phi
        if gain is not None:
            self.gain = gain
        if delays is not None:
            self.delays = delays
        if enabled is not None:
            self.enabled = enabled
        if neg is not None:
            self.neg = neg

    @property
    def id(self):
        """Gets the id of this BeamformerState.  # noqa: E501


        :return: The id of this BeamformerState.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BeamformerState.


        :param id: The id of this BeamformerState.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def theta(self):
        """Gets the theta of this BeamformerState.  # noqa: E501


        :return: The theta of this BeamformerState.  # noqa: E501
        :rtype: float
        """
        return self._theta

    @theta.setter
    def theta(self, theta):
        """Sets the theta of this BeamformerState.


        :param theta: The theta of this BeamformerState.  # noqa: E501
        :type: float
        """

        self._theta = theta

    @property
    def phi(self):
        """Gets the phi of this BeamformerState.  # noqa: E501


        :return: The phi of this BeamformerState.  # noqa: E501
        :rtype: float
        """
        return self._phi

    @phi.setter
    def phi(self, phi):
        """Sets the phi of this BeamformerState.


        :param phi: The phi of this BeamformerState.  # noqa: E501
        :type: float
        """

        self._phi = phi

    @property
    def gain(self):
        """Gets the gain of this BeamformerState.  # noqa: E501


        :return: The gain of this BeamformerState.  # noqa: E501
        :rtype: int
        """
        return self._gain

    @gain.setter
    def gain(self, gain):
        """Sets the gain of this BeamformerState.


        :param gain: The gain of this BeamformerState.  # noqa: E501
        :type: int
        """

        self._gain = gain

    @property
    def delays(self):
        """Gets the delays of this BeamformerState.  # noqa: E501


        :return: The delays of this BeamformerState.  # noqa: E501
        :rtype: list[int]
        """
        return self._delays

    @delays.setter
    def delays(self, delays):
        """Sets the delays of this BeamformerState.


        :param delays: The delays of this BeamformerState.  # noqa: E501
        :type: list[int]
        """

        self._delays = delays

    @property
    def enabled(self):
        """Gets the enabled of this BeamformerState.  # noqa: E501


        :return: The enabled of this BeamformerState.  # noqa: E501
        :rtype: list[bool]
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BeamformerState.


        :param enabled: The enabled of this BeamformerState.  # noqa: E501
        :type: list[bool]
        """

        self._enabled = enabled

    @property
    def neg(self):
        """Gets the neg of this BeamformerState.  # noqa: E501


        :return: The neg of this BeamformerState.  # noqa: E501
        :rtype: list[bool]
        """
        return self._neg

    @neg.setter
    def neg(self, neg):
        """Sets the neg of this BeamformerState.


        :param neg: The neg of this BeamformerState.  # noqa: E501
        :type: list[bool]
        """

        self._neg = neg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BeamformerState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeamformerState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
