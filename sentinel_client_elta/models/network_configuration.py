# coding: utf-8

"""
    Insight Sentinel API

    API to control beamforming on a Insight Sentinel device  # noqa: E501

    OpenAPI spec version: 0.0.0
    Contact: jonathan@insightacoustics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetworkConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'netmask': 'str',
        'dhcp': 'bool',
        'hostname': 'str',
        'gateway': 'str',
        'ntp': 'str',
        'streaming_port': 'int',
        'streaming_host': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'netmask': 'netmask',
        'dhcp': 'dhcp',
        'hostname': 'hostname',
        'gateway': 'gateway',
        'ntp': 'ntp',
        'streaming_port': 'streaming_port',
        'streaming_host': 'streaming_host'
    }

    def __init__(self, ip=None, netmask=None, dhcp=None, hostname=None, gateway=None, ntp=None, streaming_port=None, streaming_host=None):  # noqa: E501
        """NetworkConfiguration - a model defined in Swagger"""  # noqa: E501

        self._ip = None
        self._netmask = None
        self._dhcp = None
        self._hostname = None
        self._gateway = None
        self._ntp = None
        self._streaming_port = None
        self._streaming_host = None
        self.discriminator = None

        if ip is not None:
            self.ip = ip
        if netmask is not None:
            self.netmask = netmask
        if dhcp is not None:
            self.dhcp = dhcp
        if hostname is not None:
            self.hostname = hostname
        if gateway is not None:
            self.gateway = gateway
        if ntp is not None:
            self.ntp = ntp
        if streaming_port is not None:
            self.streaming_port = streaming_port
        if streaming_host is not None:
            self.streaming_host = streaming_host

    @property
    def ip(self):
        """Gets the ip of this NetworkConfiguration.  # noqa: E501


        :return: The ip of this NetworkConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this NetworkConfiguration.


        :param ip: The ip of this NetworkConfiguration.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def netmask(self):
        """Gets the netmask of this NetworkConfiguration.  # noqa: E501


        :return: The netmask of this NetworkConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this NetworkConfiguration.


        :param netmask: The netmask of this NetworkConfiguration.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def dhcp(self):
        """Gets the dhcp of this NetworkConfiguration.  # noqa: E501


        :return: The dhcp of this NetworkConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this NetworkConfiguration.


        :param dhcp: The dhcp of this NetworkConfiguration.  # noqa: E501
        :type: bool
        """

        self._dhcp = dhcp

    @property
    def hostname(self):
        """Gets the hostname of this NetworkConfiguration.  # noqa: E501


        :return: The hostname of this NetworkConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NetworkConfiguration.


        :param hostname: The hostname of this NetworkConfiguration.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def gateway(self):
        """Gets the gateway of this NetworkConfiguration.  # noqa: E501


        :return: The gateway of this NetworkConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkConfiguration.


        :param gateway: The gateway of this NetworkConfiguration.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def ntp(self):
        """Gets the ntp of this NetworkConfiguration.  # noqa: E501


        :return: The ntp of this NetworkConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ntp

    @ntp.setter
    def ntp(self, ntp):
        """Sets the ntp of this NetworkConfiguration.


        :param ntp: The ntp of this NetworkConfiguration.  # noqa: E501
        :type: str
        """

        self._ntp = ntp

    @property
    def streaming_port(self):
        """Gets the streaming_port of this NetworkConfiguration.  # noqa: E501


        :return: The streaming_port of this NetworkConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._streaming_port

    @streaming_port.setter
    def streaming_port(self, streaming_port):
        """Sets the streaming_port of this NetworkConfiguration.


        :param streaming_port: The streaming_port of this NetworkConfiguration.  # noqa: E501
        :type: int
        """

        self._streaming_port = streaming_port

    @property
    def streaming_host(self):
        """Gets the streaming_host of this NetworkConfiguration.  # noqa: E501


        :return: The streaming_host of this NetworkConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._streaming_host

    @streaming_host.setter
    def streaming_host(self, streaming_host):
        """Sets the streaming_host of this NetworkConfiguration.


        :param streaming_host: The streaming_host of this NetworkConfiguration.  # noqa: E501
        :type: str
        """

        self._streaming_host = streaming_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
